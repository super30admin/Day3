// Time Complexity : O(logn) as divide the length by half on each iteration.
// Space Complexity : O(1) we have not used any extra space.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : yeah, less than and equal , I was unable to fingure our, 
//I had to run through on paper to understand where I had to add <= or >=


// Your code here along with comments explaining your approach in three sentences only

class Solution {
    public int search(int[] nums, int target) {
        int l =0;
        int r = nums.length -1 ;
        int mid;

        while (l < r ){
            mid = l + (r - l )/2; // data type over flow

            if(nums[mid] == target){
                return mid;
            }else if (nums[l] <= nums[mid]){ // left sorted array
                if(nums[l] <= target && nums[mid] > target ){
                    r = mid - 1;
                }else{
                    l = mid + 1;
                }
            }else {
                // if(nums[mid] < nums[r]){
                if(nums[mid] < target && nums[r] >= target){
                    l = mid + 1;
                }else{
                    r = mid - 1;
                }
                // }                
            }
        }

        if(nums[l] == target) return l; // l and r met at same point.

        return -1; 
    }
}
