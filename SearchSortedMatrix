// Time Complexity : O(log(m*n)) m*n - rows* columns of matrix
// Space Complexity : O(1) - no additional space
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach in three sentences only
/*
Translate 2D matrix to 1D array and perform binary search
*/

class SearchSortedMatrix {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rowSize=matrix.length;
        int colSize=matrix[0].length;
        if(rowSize*colSize==0)
        return false;

        int left=0;
        int right=rowSize*colSize-1;

        while(left<=right){
            int index=(left+right)/2;
            int element=matrix[index/colSize][index%colSize];
            if(target==element)
            return true;
            if(target<element){
                right=index-1;
            }
            else {
                left=index+1;
            }
        }
        return false;
    }
}
