// Time Complexity :O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach in three sentences only: I followed the binary search approach where I calculate the middle index (mid). If mid matches the target, I return true. If not, I compare mid with the target: if mid > target, it indicates that the target may lie in the left part of the array. Otherwise,
//  the target may be in the right part. This process is repeated, continuously reducing the search space by halfclass Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        while(low <= high){
            int mid=low+(high-low)/2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[low] <= nums[mid]){
                if(nums[low] <= target && target < nums[mid]  ){
                   high=mid-1;
                }else{
                 low=mid+1;
                }
            }else{
                if(nums[mid] < target && target <= nums[high]){
               low=mid+1;
            }
            else{
              high=mid-1;
            }
            
        }
        }
        return -1;
    }
}