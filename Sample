// Time Complexity :
// Space Complexity :
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach in three sentences only


//search in rotated sorted array..
class Solution {
    public int search(int[] arr, int target) {
        //null
        if(arr == null) return -1;
        int low = 0; int high = arr.length-1;
        while(low <= high){ 
            int mid = low+(high-low)/2;  
            if(arr[mid] == target){//if mid is the target
                return mid;
            } else{
                //left sorted
                if(arr[low] <= arr[mid]){
                    //if target lies left range
                    if(arr[low] <= target && arr[mid] > target){
                        high = mid-1;
                    } else {
                        low = mid+1;
                    }
                } else {
                    //if target lies right range
                    if(arr[mid] < target && arr[high] >= target){
                        low = mid+1;
                    } else {
                        high = mid-1;
                    }
                }
            }
        }
        return -1;
    }
}


//search in a sorted array of unknown size
class Solution{
	public int search(ArrayReader reader, int target){
		int low = 0; int high = 1;
		while(reader.get(high) < target){// finding the boundary in which target lies
			low= high;
			high = 2*high;
		}
	}
		while(low <= high){//once boundary found finding the taget using binary search
			int mid = low +(high-low)/2;
			if(reader.get(mid) == target) return mid;
			else if(reader.get(mid) > target){
				high = mid-1;
			} else {
				low = mid+1;
			}
		
		}
		return -1;
	}
}


//search in 2D matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
	//flatten the matrix of m*n-1 array
        int low = 0; int high = m*n - 1;
        while(low <= high){
            int mid = low + (high-low)/2;
            int r = mid/n;int c = mid%n;//to find middle position row and column indexes
            if(matrix[r][c] == target){
                return true;
            } else {
                if(matrix[r][c] > target){
                    high = mid-1;
                } else{
                    low = mid+1;
                }
            }
            
        }  
        return false;
    }
}
