// find the sorted half. if left half is sorted, and if target greater than first and less than mid element, then look in left half, or look in right half
// if right half is sorted, and if target greater than mid and less than last element, then look in right half, or look in left half
// space complexity: O(1)
// time complexity: O(log n)


class Solution {
    public int search(int[] nums, int target) {

        int left = 0;
        int right = nums.length - 1;
        int mid = 0;
        int result = -1;

        while (left <= right) {
            mid = (left + right) / 2;
            if (nums[mid] == target) {
                return mid;
            } 
            if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid-1;
                } else {
                    left = mid+1;
                }
            } else {
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid+1;
                } else {
                    right = mid-1;
                }
            }
        }
           
        return result;
    }
}
