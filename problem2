// Time Complexity : O(log n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach in three sentences only

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        //checking the case with one element in the array
        if(n==1){
            if(nums[0] != target){
                return -1;
            }
            return 0;
        }
        int first = 0;
        int last = n-1;
        //performing binary search
        while(first <= last){
            int mid = (first+last)/2;
            
            if(nums[mid] == target){
                return mid;
            }
            //checking whether the first half (from first element to mid) is sorted or not
            if(nums[first] <= nums[mid]){
                //if the first half is sorted,
                //if the target lies between the first and mid values then 
                //perform binary search in this half
                if(nums[first] <= target && target <= nums[mid]){
                    last = mid-1;
                }
                //else perform binary search in the other half
                else{
                    first = mid+1;
                }
            }
            //if the second half is sorted 
            else{
                //check whether the target lies in between the mid and last element
                //if it does, then perform binary search
                if(nums[mid] <= target && target <= nums[last]){
                    first = mid+1;
                }
                //else do binary search in the other half
                else{
                    last = mid-1;
                }
            }

        }
        //if the element is not found then return -1
        return -1;
    }
};
