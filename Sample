// Time Complexity :
// Space Complexity :
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach in three sentences only

/*
    Leetcode Problem - 74 (Search a 2D Matrix)
    TC - O(log m * log n) ~ O(log (m*n))
    SC - O(1)
    Approach - I have used the binary search algorithm with two pointer (lower and upper bound). Finding the mid and row and col using mid value and check if the element matches the target otherwise
    moving the pointer accordingly to check the element.
*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0 || matrix == null) {
            return false;
        }
        int m = matrix.length, n = matrix[0].length;
        int low = 0, high = m * n - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            int row = mid / n;
            int col = mid % n;
            if(matrix[row][col] == target) {
                return true;
            } else if (matrix[row][col] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return false;
    }
}