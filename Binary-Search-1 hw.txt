Binary-Search-1


Problem1: Search a 2D Matrix

Solution 1:

Time complexity ---- O(log(m*n)), where m and n are the matrix dimensions
Space complexity ---- O(1)

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if matrix == None or len(matrix)==0:
            return False

        m= len(matrix)
        n = len(matrix[0])

        low =0
        high =m * n -1

        while low<= high:
            mid = low + (high-low)//2

            row = mid//n
            col = mid % n

            if matrix[row][col]== target:
                return True

            elif target > matrix[row][col] :
                low = mid + 1

            else:
                high = mid -1

        return False



Solution 2:

Time complexity ---- O(m*n), where m and n are the matrix dimensions
Space complexity ---- O(1)

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        for row in matrix:
            for element in row:
                if element == target:
                    return True
        return False





Problem2: Search in a Rotated Sorted Array 

Time complexity ---- O(log n)
Space complexity ---- O(1)

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if nums == None or nums == 0:
            return -1
        
        low= 0
        high = len(nums)-1

        while low <= high:
            mid = low + (high-low)//2
            
            if nums[mid]== target:
                return mid

            if nums[low]<= nums[mid] :

                if nums[low] <= target < nums[mid]:
                    high= mid -1
                else:
                    low = mid +1

            else:
                
                if nums[mid] < target <= nums[high]:
                    low = mid + 1
                else:
                    high = mid - 1

        return -1





Problem3: Search in Infinite sorted array

Time complexity ---- O(log n)
Space complexity ---- O(1)

class Solution:
    def search(self, reader: 'ArrayReader', target: int) -> int:
        low =0
        high = 1

        while reader.get(high)< target:
            low = high
            high = high *2

        return self.binarySearch(reader, target,low, high)   
    
    def binarySearch(self, reader: 'ArrayReader', target: int, low: int, high : int) -> int:
        while low <= high:
            mid = low + (high - low)//2

            if reader.get(mid)== target:
                return mid

            elif target > reader.get(mid):
                low = mid +1

            else:
                high = mid -1

        return -1