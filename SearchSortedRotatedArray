// Time Complexity : O(log(n)) n - no of elements in the array
// Space Complexity : O(1) - no additional space
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach in three sentences only
/*
We perform binary search with an addition of boundary value check
since the array is rotated and sorted, to check if target falls within those boundaries
so we can narrow down the search space to only one half of the array.
*/

class SearchSortedRotatedArray {
    public int search(int[] nums, int target) {
        int n=nums.length;
        int left =0;
        int right=nums.length-1;

        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target)
            return mid;
            if(nums[mid]>=nums[left]){
                if(target>=nums[left] && target<nums[mid]){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
            else {
                if(target>nums[mid] && target<=nums[right]){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
        }

        return -1;
    }
}
}
