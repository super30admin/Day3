// Time Complexity :O(log n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes  
// Any problem you faced while coding this : I was taking some time to understand the way to get the middle value of the array; As why we need to divide and take mod by n.


// Your code here along with comments explaining your approach in three sentences only

// 1. Considered 2D as 1D matrix.
// 2. placed left ptr at 0th index and right at last index and found the middle element in the array using 2D indexing. 
// 3. Then checked if the middle is the target and if that is the target return the value otherwise search for the target in the left or right part as usual we do in Binary search.

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int mid,left,right,m,n;
        //considering 2D as a 1D array
        m=matrix.length;
        n=matrix[0].length;
        left=0;
        right=(m*n)-1;
        
        while(left<=right){
            mid=left+(right-left)/2;
            int middle=matrix[mid/n][mid%n];
            if(middle==target)
                return true;
            else if(middle<target)
                left=mid+1;
            else if(middle>target)
                right=mid-1;
        }
        return false;
    }
}

// Time Complexity :O(log n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes  
// Any problem you faced while coding this : Faced some difficulty with <= comparison at certain places like if(nums[left]<=nums[mid]) if(nums[left]<=target && nums[mid]>target) and if(nums[mid]<target && nums[right]>=target)

// Your code here along with comments explaining your approach in three sentences only
class Solution {
    public int search(int[] nums, int target) {
        // 1. init left=0,right=n-1,mid;
        // 2. While(l<=r)
        // 3. find the mid and if mid==t then ret t
        // 4. Else, if nums[l]<t and nums[mid]>t then right=mid-1 else left=mid+1
        // 5. Othecase, if nums[mid]<t and nums[right]>t then left=mid+1 else right=mid-1
        int left=0,right=nums.length-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target)
                return mid;
            if(nums[left]<=nums[mid]){
                if(nums[left]<=target && nums[mid]>target){
                    right=mid-1;
                }
                else
                    left=mid+1;
            }
            else{
                if(nums[mid]<target && nums[right]>=target){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
        }
        return -1;
    }
}

// Time Complexity :O(log n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes  
// Any problem you faced while coding this : Faced some difficulty when retriving the middle value using reader.get().

// Your code here along with comments explaining your approach in three sentences only
// s
class Solution {
    public int search(ArrayReader reader, int target) {
        int low=0, high=1;
        while(reader.get(high)<target){
            low=high;
            high=high*2;
        }
        while(low<=high){
            int mid=low+(high-low)/2;
            int midVal=reader.get(mid);
            if(midVal==target)
                return mid;
            if(midVal<target)
                low=mid+1;
            else if(midVal>target)
                high=mid-1;
        }
        return -1;
    }
}