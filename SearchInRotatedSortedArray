// Time Complexity : O(log n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : We cannot to do a common logic of binary search in non sorted and sorted side.Binary Search should be different and hence we do a common logic.

//Approach: Initially identify what is the sorted side and non sorted side in the array.
//If the target lies in the sorted side then do a binary search on it.
//If the target lies on the non sorted side then do a binary search on it.
//In a rotated sorted array , atleast one half of the array is always sorted.
class Solution {
    public int search(int[] nums, int target) {
        int left=0; int right=nums.length-1;
        int mid=0;
        while(left<=right){
            mid=left+(right-left)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(nums[left]<=nums[mid]){
                if((nums[left]<=target) && nums[mid]>target){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }else{
                if((nums[right]>=target) && nums[mid]<target){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
        }
        return -1;
    }
}
