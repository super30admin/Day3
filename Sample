//Problem 1
// Time Complexity :O(log (n*m))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach in three sentences only
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
     if(matrix.length==0 || matrix==null)   return false; // if the matrix does not exist
     int m=matrix.length;
     int n=matrix[0].length;
     int low=0;
     int high=n*m-1;
     while(low<=high){
        int mid=low+(high-low)/2;// integer overflow
        int row=mid/n;
        int col=mid%n;
        if(matrix[row][col]==target) return true; // element present at the mid index
        else if(target>matrix[row][col])
        {
low=mid+1;
        }
        else{
high=mid-1;
        }
     }
     return false;
    }
}

//Problem 2
// Time Complexity :O(log (n))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No
class Solution {
    public int search(int[] nums, int target) {
        if(nums.length==0 ||nums==null) return -1;
        int low=0;
        int high=nums.length-1;
        while(low<=high){
            int mid=low+(high-low)/2;// integer overflow
            if(nums[mid]==target)
            {
                return mid;
            }
            else if(nums[low]<=nums[mid])// this part is sorted
            {
                if(target>=nums[low] && target<nums[mid])// target is less than mid
                {
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else{
                if(target>nums[mid] && target<=nums[high])
                {
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return -1;
    }
}

//Problem 3
// Time Complexity :O(log (n))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No
/**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface ArrayReader {
 *     public int get(int index) {}
 * }
 */

class Solution {
    public int search(ArrayReader reader, int target) {
      int low=0;
      int high=10000; // taking size from the constraint
      if(target<reader.get(0)){ return -1;}// if target is less than the first element
      while(low<=high)
      {
        int mid=low+(high-low)/2;// avoiding integer overflow
        int i=reader.get(mid);
        if(target==i) return mid;
        if(target>i){
            low=mid+1;
        }
        else{
            high=mid-1;
        }
      }
      return -1;
    }
}